import 'dart:io';

// {
//   name: "text70",
//   valueLight: "0xFF4D4D4D",
//   valueDark: "0xFF4D4D4D",
// }
void main() {
  final List<String> colors = [
    'primary',
    'primaryLight',
    'primaryDark',
    'primaryActive',
    'textMain',
    'textSub',
    'textDisabled',
    'textColor',
    'text70',
    'textLight',
    'textLightGray',
    'danger',
    'dangerLight',
    'success',
    'successLight',
    'warning',
    'warningLight',
    'white',
    'black',
    'blue',
    'orange',
  ];
  final List<String> fontWeights = [
    'light',
    'regular',
    'medium',
    'semiBold',
    'bold',
  ];
  final List<int> fontSizes = [
    11,
    12,
    14,
    16,
    18,
    20,
    22,
    24,
    26,
    28,
    30,
    32,
    36,
    40,
  ];
  const String outputPath = 'lib/generated/';
  const String importColorsClass =
      "import 'package:yal_spa/app/core/utils/app_colors.dart';";
  const nameColorsClass = 'AppColors';

  // Create a new file named 'style_atoms.dart'
  final File file = File('${outputPath}style_atoms.dart');
  // Create a sink to write to the file
  final sink = file.openWrite();
  // Write the header for the file
  sink.writeln('// Generated TextStyle getters');
  sink.writeln('// Do not edit this file directly.');
  sink.writeln('// Last updated: ${DateTime.now()}');
  sink.writeln('// Run `dart run generate_styles.dart` to update this file.');
  sink.writeln("import 'package:flutter/material.dart';");
  sink.writeln(importColorsClass);
  generateWeightAtoms(sink);
  generateColors(sink, colors, nameColorsClass);
  generateFontSizes(sink, fontSizes);
  generateWeightAndPxMixes(sink, fontSizes, fontWeights);
  generateFinalGeters(sink, fontSizes, fontWeights, colors);

  sink.close();
}

String capitalize(String s) => s[0].toUpperCase() + s.substring(1);

Future<void> generateWeightAtoms(IOSink sink) async => sink.writeln('''
  
extension WeightAtoms on BuildContext {
  TextStyle get style => Theme.of(this).textTheme.titleMedium!.copyWith(
        color: Color(0xFF1A1A1A),
        //fontFamily: isArabic ? Constants.arFont : Constants.enFontRegular,
      );
  TextStyle get light => style.copyWith(fontWeight: FontWeight.w300);
  TextStyle get regular => style.copyWith(fontWeight: FontWeight.normal);
  TextStyle get medium => style.copyWith(fontWeight: FontWeight.w500);
  TextStyle get semiBold => style.copyWith(fontWeight: FontWeight.w600);
  TextStyle get bold => style.copyWith(fontWeight: FontWeight.bold);
}
  ''');

void generateColors(IOSink sink, List<String> colors, String nameColorsClass) {
  sink.writeln('extension ColorAtoms on TextStyle {');
  for (final String color in colors) {
    sink.writeln(
      '  TextStyle get $color => copyWith(color: $nameColorsClass.$color);',
    );
  }
  sink.writeln('}\n\n');
}

void generateFontSizes(IOSink sink, List<int> fontSizes) {
  sink.writeln('extension FontSizeAtoms on TextStyle {');
  for (final int size in fontSizes) {
    sink.writeln('  TextStyle get px$size => copyWith(fontSize: $size.0);');
  }
  sink.writeln('}\n\n');
}

void generateWeightAndPxMixes(
  IOSink sink,
  List<int> fontSizes,
  List<String> fontWeights,
) {
  sink.writeln('extension WeightAndPxMixes on BuildContext {');
  for (final int size in fontSizes) {
    for (final String weight in fontWeights) {
      sink.writeln(
        '  TextStyle get $weight$size => $weight.px$size;',
      );
    }
  }
  sink.writeln('}');
}

void generateFinalGeters(
  IOSink sink,
  List<int> fontSizes,
  List<String> fontWeights,
  List<String> colors,
) {
  for (final String wieght in fontWeights) {
    sink.writeln('extension ${capitalize(wieght)}Atoms on BuildContext {');
    for (final int size in fontSizes) {
      for (final String color in colors) {
        sink.writeln(
          '  TextStyle get $wieght$size${capitalize(color)} => $wieght$size.$color;',
        );
      }
    }
    sink.writeln('}');
  }
}
